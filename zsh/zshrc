# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh

source ~/.zprofile

if [[ `uname -s` == "Darwin" ]] ; then
	_mac=1
	_unix=1
fi
if [[ `uname -s` == "Linux" ]] ; then
	_linux=1
fi

# Unify coding: solves the MATLAB core dump problem
export LANG="en_US.UTF-8"
export LC_CTYPE="en_US.UTF-8"
export LC_NUMERIC="en_US.UTF-8"
export LC_TIME="en_US.UTF-8"
export LC_COLLATE="en_US.UTF-8"
export LC_MONETARY="en_US.UTF-8"
export LC_MESSAGES="en_US.UTF-8"
export LC_PAPER="en_US.UTF-8"
export LC_NAME="en_US.UTF-8"
export LC_ADDRESS="en_US.UTF-8"
export LC_TELEPHONE="en_US.UTF-8"
export LC_MEASUREMENT="en_US.UTF-8"
export LC_IDENTIFICATION="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"
export LC_LOCALE="en_US.utf-8"

# Source bashrc first, so that we can overwrite themes later
#source $HOME/.bashrc

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="hpl"

# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

#alias -s py=vim
alias -s md=vim
#alias -s log="less -MN"
alias -s log="less"
alias -s html="open -a Google\ Chrome"

alias vi='vim'
alias rm='rm -i'
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
alias tailf='tail -f'
alias ms='chmod u+x'
alias rl='readlink -f'
# ls -1 * | file-grep
# Note, only file names are pipelined
alias file-grep='xargs grep -l'
alias psg='ps aux | grep'

# Git aliases
# Git diff by words that works with Chinese (UTF-8)
alias gdwc="git diff --color-words=. --word-diff-regex=$'[^\x80-\xBF][\x80-\xBF]*'"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to disable command auto-correction.
# DISABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)

# VirtualEnv Wrapper
export WORKON_HOME=~/VirtualEnvs
#mkdir -p $WORKON_HOME
#source /usr/local/bin/virtualenvwrapper.sh

# The python path installed by homebrew
export HOME_BREW_PYTHON_PATH="/usr/local/opt/python/libexec/bin"
export VIRTUALENVWRAPPER_PYTHON="$HOME_BREW_PYTHON_PATH/python"
plugins=(git brew pip sprunge urltools virtualenvwrapper)

export PATH=$HOME/.local/bin:/usr/local/sbin:/usr/local/bin:$PATH

source $ZSH/oh-my-zsh.sh

# User configuration

#export PATH="/Users/hupili/bin/core-utils:$PATH"
# From the latest notificadtion after installing brewed coreutils
export PATH=/usr/local/opt/coreutils/libexec/gnubin:$PATH
#export PATH="$(brew --prefix coreutils)/libexec/gnubin:/usr/local/bin:$PATH"

# Python installed by brew
export PATH="$HOME_BREW_PYTHON_PATH:$PATH"

export PATH=$HOME/bin:/usr/local/bin:$PATH:$HOME/utils
# Node global executables
export PATH=$PATH:/usr/local/share/npm/bin
# Haskell executables
export PATH=$PATH:~/.cabal/bin
# Ruby executables
export PATH=$PATH:$HOME/.gem/bin:

# NVM
export NVM_DIR=$HOME/.nvm
test $_mac && source $(brew --prefix nvm)/nvm.sh

# Node modules
export NODE_PATH=$NODE_PATH:$HOME/.npm/:/usr/local/lib/node_modules:/usr/local/share/npm/lib:/usr/local/share/npm/lib/node_modules

# TexLive
export PATH="$PATH:/usr/local/texlive/2014/bin/x86_64-darwin"
export INFOPATH="/usr/local/texlive/2014/texmf-dist/doc/info:$INFOPATH"
export MANPATH="/usr/local/texlive/2014/texmf-dist/doc/man:$MANPATH"

# export MANPATH="/usr/local/man:$MANPATH"
#


# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/dsa_id"
#

# OS specific initialization

function _mac_gt()
{
	if [[ "$1" != "" ]]; then
		open -a Terminal "$1"
	else
		open -a Terminal `pwd`
	fi
}


function _init_mac() {
    # Launch MAC apps from command-line
    alias firefox="/opt/homebrew-cask/Caskroom/firefox/latest/Firefox.app/Contents/MacOS/firefox-bin"
    alias thunderbird="/Applications/Thunderbird.app/Contents/MacOS/thunderbird-bin"
    alias texmacs="/Applications/TeXmacs-1.99.1.app/Contents/MacOS/TeXmacs"
    alias skim="$HOME/Applications/Skim.app/Contents/MacOS/Skim"
    alias inkscape="/Applications/Inkscape.app/Contents/Resources/bin/inkscape"
    alias gemacs="open -a emacs"
    alias sublime="open -a 'Sublime Text 2'"
    alias atom="open -a Atom"
    # https://gist.github.com/quickshiftin/9130153
    alias man='_() { echo $1; man -M $(brew --prefix)/opt/coreutils/libexec/gnuman $1 1>/dev/null 2>&1;  if [ "$?" -eq 0 ]; then man -M $(brew --prefix)/opt/coreutils/libexec/gnuman $1; else man $1; fi }; _'
    #alias rstudio="open -a RStudio"
    # Solve the problem of Rcpp
    # See
    # http://stackoverflow.com/questions/21370363/link-error-installing-rcpp-library-not-found-for-lintl
    alias rstudio="PKG_LIBS=-L/usr/local/Cellar/gettext/0.18.3.2/lib open -a RStudio"

    # Terminal and GUI shortcuts
    test $_mac && alias go="open"
    test $_mac && alias gt=_mac_gt

    #source `brew --repository`/Library/Contributions/brew_bash_completion.sh
}

test $_mac && _init_mac

genpasswd() {
    # http://www.cyberciti.biz/faq/linux-random-password-generator/
    local l=$1
    [[ "$l" == "" ]] && l=16
    tr -dc A-Za-z0-9_ < /dev/urandom | head -c ${l} | xargs
}

boostterminal() {
    # https://news.ycombinator.com/item?id=7747982
    if [[ $(find /private/var/log/asl/ -name "*.asl" ) == 0 ]]; then
        echo "removing .asl files"
        sudo rm -rf /private/var/log/asl/*.asl
    fi
    echo "removing terminal.plist"
    rm -f ~/Library/Preferences/com.apple.terminal.plist
}

bury_copy() { 
	# http://stackoverflow.com/questions/1529946/linux-copy-and-create-destination-dir-if-it-does-not-exist
	mkdir -p `dirname $2` && cp "$1" "$2"; 
}

start_proxy(){
	export ALL_PROXY=socks5://127.0.0.1:1080
}

end_proxy(){
	unset ALL_PROXY
}

# Proxy configuration for privoxy
function proxy_off(){
    unset http_proxy
    unset https_proxy
    echo -e "privoxy HTTP/ HTTPS proxy is OFF"
}
function proxy_on() {
    export no_proxy="localhost,127.0.0.1,localaddress,.localdomain.com"
    export http_proxy="http://127.0.0.1:8118"
    export https_proxy=$http_proxy
    echo -e "privoxy HTTP/ HTTPS proxy is ON"
}


# If on MAC, we stick to the system default
test $_mac || umask 0007

# Must be placed behind the sourcing oh-my-zsh to take effect
# Or ls will be aliased to `ls -G`
alias ls='ls --color'

# Configure docker client
export DOCKER_CERT_PATH=/Users/hupili/.boot2docker/certs/boot2docker-vm
export DOCKER_TLS_VERIFY=1
# Check IP using cmd: boot2docker ip
export DOCKER_HOST=tcp://192.168.59.103:2376

# RVM disabled: 20190203
#which rvm && rvm use 2.1.3
# test $HOME/.rvm/scripts/rvm && source $HOME/.rvm/scripts/rvm

[[ -e $HOME/.personal-configurations.sh ]] && source $HOME/.personal-configurations.sh

export ANDROID_HOME=/usr/local/opt/android-sdk

alias lockscreen="/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend"


# Some bespoke dockerised commands


function enter_docker_env(){
	eval $(docker-machine env default)
}

function exec_dockerised_command(){
	enter_docker_env
	local image_name=$1
	shift
	local other_options=$1
	shift
	local container_workdir=$1
	shift
	full_command="docker run -v '$(pwd)':'$container_workdir' $other_options $image_name"
	#local quoted_args=$(printf ' "%q"' "$@")
	#echo $quoted_args
	#eval $full_command $quoted_args
	#echo $full_command
	#echo $@
	eval $full_command $@
	#echo $full_command $@
}

alias mgcli="exec_dockerised_command hupili/mgcli '-v $HOME/.mgcli/:/root/.mgcli/ --rm -it' /data"
alias wget2="exec_dockerised_command hupili/wget2 '--rm -it' /data"
alias pdftk="exec_dockerised_command mnuessler/pdftk '--rm -it' /work"

alias xlock="open -a ScreenSaverEngine"

export PATH="/usr/local/opt/jpeg-turbo/bin:$PATH"

test $_mac && source /usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc
test $_mac && source /usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc

eval "$(pyenv init --path)"
eval "$(pyenv init -)"
